terraform {
  required_version = ">= 0.12"
}

locals {
  config_roots = [for conf_root in var.config_roots : abspath(conf_root)]

  // find all template files for $stack_id
  tmpl_fileset_glob_base = replace(var.tmpl_fileset_glob_base, "MODULE_ID", var.module_id)
  root_tmpl_files = [
    for conf_root in local.config_roots : [
      for tf_name in fileset("${conf_root}/${var.tmpl_dir}", local.tmpl_fileset_glob_base) : {
        source = "${conf_root}/${var.tmpl_dir}/${tf_name}"
        dest   = "${conf_root}/stacks/${var.stack_id}/${tf_name}"
      }
    ]
  ]
  no_root_tmpl_files_found = sort(compact([
    for conf_root in local.config_roots : (
      length(fileset("${conf_root}/${var.tmpl_dir}", local.tmpl_fileset_glob_base)) == 0 ?
      "${conf_root}/${var.tmpl_dir}/${local.tmpl_fileset_glob_base}" : ""
    )
  ]))

  // find all template files for $module_id
  tmpl_fileset_glob_overrides = format(
    "${var.stack_id}/%s/%s",
    var.namespace_id == null ? "**" : var.namespace_id,
    replace(var.tmpl_fileset_glob_overrides, "MODULE_ID", var.module_id)
  )
  override_tmpl_files = [
    for conf_root in local.config_roots : [
      for tf_name in fileset("${conf_root}/${var.tmpl_dir}", local.tmpl_fileset_glob_overrides) : {
        source = "${conf_root}/${var.tmpl_dir}/${tf_name}"
        dest   = "${conf_root}/stacks/${tf_name}"
      }
    ]
  ]

  // combine the 2 sets into one big map:
  all_tmpl_files = {
    for tf in flatten([local.root_tmpl_files, local.override_tmpl_files]) :
    tf.source => tf.dest
  }
}

resource "local_file" "config_values" {
  for_each = local.all_tmpl_files
  content = join("\n", [
    "${var.comment_line} WARNING: AUTO-GENERATED by https://github.com/schollii/terraform-local-gen-files.git",
    "${var.comment_line}     source: ${each.key}",
    "${var.comment_line}     root module: ${abspath(path.root)}",
    templatefile(each.key, var.tmpl_vars)
  ])
  filename        = each.value
  file_permission = "0644"
}
