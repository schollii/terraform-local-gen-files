terraform {
  required_version = ">= 0.13"
}

locals {
  template_vars = merge(var.template_vars,
    {
      auto_warning = "Generated by gen-config-files-from-tf module"
    }
  )

  // find all $template_in files across all $config_root/base folders, to be rendered to
  // $config_root/$stack_id/auto-root-$filename
  root_templ_files = [
    for path in var.config_roots : [
      for tf_name in fileset("${path}/_templates_", "${var.tpl_auto_root}-${var.tpl_name}") : {
        source = "${path}/_templates_/${tf_name}"
        dest = (
          var.k8s_ns == "**" ?
          // common to all namespaces:
          "${path}/stacks/${var.stack_id}/${tf_name}" :
          // for specific namespace:
          "${path}/stacks/${var.stack_id}/${var.k8s_ns}/${tf_name}"
        )
      }
    ]
  ]

  // find all $template_in files across all $config_root/_templates_/$stack_id/$k8s_namespace
  // folders, to be rendered to $config_root/$found_path/auto-$filename
  namespace_templ_files = [
    for path in var.config_roots : [
      for tf_name in fileset("${path}/_templates_", "${var.stack_id}/${var.k8s_ns}/${var.tpl_auto}-${var.tpl_name}") : {
        source = "${path}/_templates_/${tf_name}"
        dest   = "${path}/stacks/${dirname(tf_name)}/${basename(tf_name)}"
      }
    ]
  ]

  // combine the 2 sets into one big map:
  all_templ_files = {
    for tf in flatten([local.root_templ_files, local.namespace_templ_files]) :
    tf.source => tf.dest
  }
}

resource "local_file" "helm_chart_values" {
  for_each = local.all_templ_files
  content = templatefile(
    each.key,
    local.template_vars
  )
  filename        = each.value
  file_permission = "0644"
}
